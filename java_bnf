Java Syntax Specification
Programs

    <compilation unit> ::= <import declarations>? <type declarations>?

Declarations

    <import declarations> ::= <import declaration> | <import declarations> <import declaration>

    <import declaration> ::= <single type import declaration>

    <single type import declaration> ::= import <type name> ;

    <type declarations> ::= <type declaration> | <type declarations> <type declaration>

    <type declaration> ::= <class declaration> | ;

    <class declaration> ::= <class modifiers>? class <identifier> <super>? <class body>

    <class modifiers> ::= <class modifier> | <class modifiers> <class modifier>

    <class modifier> ::= public | abstract

    <super> ::= extends <class type>

    <class body> ::= { <class body declarations>? }

    <class body declarations> ::= <class body declaration> | <class body declarations> <class body declaration>

    <class body declaration> ::= <class member declaration> | <static initializer> | <constructor declaration>

    <class member declaration> ::= <field declaration> | <method declaration>

    <static initializer> ::= static <block>

    <constructor declaration> ::= <constructor modifiers>? <constructor declarator>  <constructor body>

    <constructor modifiers> ::= <constructor modifier> | <constructor modifiers> <constructor modifier>

    <constructor modifier> ::= public | private

    <constructor declarator> ::= <simple type name> ( <formal parameter list>? )

    <formal parameter list> ::= <formal parameter> | <formal parameter list> , <formal parameter>

    <formal parameter> ::= <type> <variable declarator id>

    <constructor body> ::= { <explicit constructor invocation>? <block statements>? }

    <explicit constructor invocation>::= this ( <argument list>? ) | super ( <argument list>? )

    <field declaration> ::= <field modifiers>? <type> <variable declarators> ;

    <field modifiers> ::= <field modifier> | <field modifiers> <field modifier>

    <field modifier> ::= public | private | static

    <variable declarators> ::= <variable declarator> | <variable declarators> , <variable declarator>

    <variable declarator> ::= <variable declarator id> | <variable declarator id> = <variable initializer>

    <variable declarator id> ::= <identifier> | <variable declarator id> [ ]

    <variable initializer> ::= <expression> | <array initializer>

    <method declaration> ::= <method header> <method body>

    <method header> ::= <method modifiers>? <result type> <method declarator> 

    <result type> ::= <type> | void

    <method modifiers> ::= <method modifier> | <method modifiers> <method modifier>

    <method modifier> ::= public | private | static | abstract

    <method declarator> ::= <identifier> ( <formal parameter list>? )

    <method body> ::= <block> | ;

    <array initializer> ::= { <variable initializers>? , ? }

    <variable initializers> ::= <variable initializer> | <variable initializers> , <variable initializer>

    <variable initializer> ::= <expression> | <array initializer>

Types

    <type> ::= <primitive type> | <reference type>

    <primitive type> ::= <numeric type> | boolean

    <numeric type> ::= <integral type> | <floating-point type>

    <integral type> ::= int | char

    <floating-point type> ::= float 

    <reference type> ::= <class type> | <array type>

    <class type> ::= <type name>
    
    <array type> ::= <type> [ ]

Blocks and Commands

    <block> ::= { <block statements>? }

    <block statements> ::= <block statement> | <block statements> <block statement>

    <block statement> ::= <local variable declaration statement> | <statement>

    <local variable declaration statement> ::= <local variable declaration> ;

    <local variable declaration> ::= <type> <variable declarators>

    <statement> ::= <statement without trailing substatement> | <if then statement> | <if then else statement> | <while statement> | <for statement>

    <statement no short if> ::= <statement without trailing substatement> | <labeled statement no short if> | <if then else statement no short if> | <while statement no short if> | <for statement no short if>

    <statement without trailing substatement> ::= <block> | <empty statement> | <expression statement> | <break statement> | <continue statement> | <return statement> 
    <empty statement> ::= ;

    <expression statement> ::= <statement expression> ;

    <statement expression> ::= <assignment> | <preincrement expression> | <postincrement expression> | <predecrement expression> | <postdecrement expression> | <method invocation> | <class instance creation expression>

    <if then statement>::= if ( <expression> ) <statement>

    <if then else statement>::= if ( <expression> ) <statement no short if> else <statement>

    <if then else statement no short if> ::= if ( <expression> ) <statement no short if> else <statement no short if>

    <while statement> ::= while ( <expression> ) <statement>

    <while statement no short if> ::= while ( <expression> ) <statement no short if>

    <for statement> ::= for ( <for init>? ; <expression>? ; <for update>? ) <statement>

    <for statement no short if> ::= for ( <for init>? ; <expression>? ; <for update>? ) <statement no short if>

    <for init> ::= <statement expression list> | <local variable declaration>

    <for update> ::= <statement expression list>

    <statement expression list> ::= <statement expression> | <statement expression list> , <statement expression>

    <break statement> ::= break <identifier>? ;

    <continue statement> ::= continue <identifier>? ;

    <return statement> ::= return <expression>? ;

Expressions

    <constant expression> ::= <expression>

    <expression> ::= <assignment expression>

    <assignment expression> ::= <conditional expression> | <assignment>

    <assignment> ::= <left hand side> <assignment operator> <assignment expression>

    <left hand side> ::= <expression name> | <field access> | <array access>

    <assignment operator> ::= = | *= | /= | %= | += | -= | <<= | >>= | &= | ^= | |=

    <conditional expression> ::= <conditional or expression> | <conditional or expression> ? <expression> : <conditional expression>

    <conditional or expression> ::= <conditional and expression> | <conditional or expression> || <conditional and expression>

    <conditional and expression> ::= <inclusive or expression> | <conditional and expression> && <inclusive or expression>

    <inclusive or expression> ::= <exclusive or expression> | <inclusive or expression> | <exclusive or expression>

    <exclusive or expression> ::= <and expression> | <exclusive or expression> ^ <and expression>

    <and expression> ::= <equality expression> | <and expression> & <equality expression>

    <equality expression> ::= <relational expression> | <equality expression> == <relational expression> | <equality expression> != <relational expression>

    <relational expression> ::= <shift expression> | <relational expression> < <shift expression> | <relational expression> > <shift expression> | <relational expression> <= <shift expression> | <relational expression> >= <shift expression> | <relational expression> instanceof <reference type>

    <shift expression> ::= <additive expression> | <shift expression> << <additive expression> | <shift expression> >> <additive expression> | <shift expression> >>> <additive expression>

    <additive expression> ::= <multiplicative expression> | <additive expression> + <multiplicative expression> | <additive expression> - <multiplicative expression>

    <multiplicative expression> ::= <unary expression> | <multiplicative expression> * <unary expression> | <multiplicative expression> / <unary expression> | <multiplicative expression> % <unary expression>

    <cast expression> ::= ( <primitive type> ) <unary expression> | ( <reference type> ) <unary expression not plus minus>

    <unary expression> ::= <preincrement expression> | <predecrement expression> | + <unary expression> | - <unary expression> | <unary expression not plus minus>

    <predecrement expression> ::= -- <unary expression>

    <preincrement expression> ::= ++ <unary expression>

    <unary expression not plus minus> ::= <postfix expression> | ~ <unary expression> | ! <unary expression> | <cast expression>

    <postdecrement expression> ::= <postfix expression> --

    <postincrement expression> ::= <postfix expression> ++

    <postfix expression> ::= <primary> | <expression name> | <postincrement expression> | <postdecrement expression>

    <method invocation> ::= <method name> ( <argument list>? ) | <primary> . <identifier> ( <argument list>? ) | super . <identifier> ( <argument list>? )

    <field access> ::= <primary> . <identifier> | super . <identifier>

    <primary> ::= <primary no new array> | <array creation expression>

    <primary no new array> ::= <literal> | this | ( <expression> ) | <class instance creation expression> | <field access> | <method invocation> | <array access>

    <class instance creation expression> ::= new <class type> ( <argument list>? )

    <argument list> ::= <expression> | <argument list> , <expression>

    <array creation expression> ::= new <primitive type> <dim exprs> <dims>? | new <class type> <dim exprs> <dims>?

    <dim exprs> ::= <dim expr> | <dim exprs> <dim expr>

    <dim expr> ::= [ <expression> ]

    <dims> ::= [ ] | <dims> [ ]

    <array access> ::= <expression name> [ <expression> ] | <primary no new array> [ <expression>]

Tokens

    <type name> ::= <identifier>

    <simple type name> ::= <identifier>

    <expression name> ::= <identifier> | <ambiguous name> . <identifier>

    <method name> ::= <identifier> | <ambiguous name>. <identifier>

    <ambiguous name>::= <identifier> | <ambiguous name>. <identifier>

    <literal> ::= <integer literal> | <floating-point literal> | <boolean literal> | <character literal> | <string literal> | <null literal>

    <integer literal> ::= <decimal integer literal> 

    <decimal integer literal> ::= <decimal numeral> <integer type suffix>?

    <integer type suffix> ::= l | L

    <decimal numeral> ::= 0 | <non zero digit> <digits>?

    <digits> ::= <digit> | <digits> <digit>

    <digit> ::= 0 | <non zero digit>

    <non zero digit> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

    <floating-point literal> ::= <digits> . <digits>? <exponent part>? <float type suffix>?

    <digits> <exponent part>? <float type suffix>?

    <exponent part> ::= <exponent indicator> <signed integer>

    <exponent indicator> ::= e | E

    <signed integer> ::= <sign>? <digits>

    <sign> ::= + | -

    <float type suffix> ::= f | F |

    <boolean literal> ::= true | false

    <character literal> ::= ' <single character> ' | ' <escape sequence> '

    <single character> ::= <input character> except ' and \

    <string literal> ::= " <string characters>?"

    <string characters> ::= <string character> | <string characters> <string character>

    <string character> ::= <input character> except " and \ | <escape character>

    <null literal> ::= null

    <keyword> ::= abstract | boolean | break | char | class | continue | else | extends | float | for | if | implements | import | instanceof | int | new | private  | public | return | static | super | this | void | while 
